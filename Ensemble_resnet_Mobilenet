import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.applications import MobileNetV2, ResNet50
from tensorflow.keras import layers
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array

# Load the pre-trained models excluding the top layer
mobilenet_base = MobileNetV2(input_shape=(224, 224, 3), include_top=False, weights='imagenet')
resnet_base = ResNet50(input_shape=(224, 224, 3), include_top=False, weights='imagenet')

# Extract the outputs from the base models
x_mobilenet = mobilenet_base.output
x_resnet = resnet_base.output

# Ensure the extracted outputs are from the appropriate layers
x_mobilenet = layers.GlobalAveragePooling2D()(x_mobilenet)
x_resnet = layers.GlobalAveragePooling2D()(x_resnet)

# Concatenate the outputs
combined = layers.concatenate([x_mobilenet, x_resnet])

# Add final layers
x = layers.Dense(1024, activation='relu')(combined)
x = layers.Dropout(0.5)(x)
output = layers.Dense(1, activation='sigmoid')(x)

# Create the ensemble model
ensemble_model = Model(inputs=[mobilenet_base.input, resnet_base.input], outputs=output)

# Compile the model
ensemble_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Save the ensemble model
ensemble_model.save('ensemble_mobilenet_resnet_blur_vs_clear.h5')

# Example usage for prediction
def predict_image(image_path):
    img = load_img(image_path, target_size=(224, 224))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Predict using the ensemble model
    prediction = ensemble_model.predict([img_array, img_array])
    print(f'Prediction: {prediction[0][0]}')

# Example prediction (replace 'path/to/image.jpg' with the actual image path)
predict_image('/content/drive/MyDrive/blur_vs_sharp/blur/30418549.jpg')
