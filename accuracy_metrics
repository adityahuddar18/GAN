import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, classification_report

# Load the trained model
model = load_model('/content/drive/MyDrive/blur_sharp_classifier.h5')

# Define parameters
IMG_SIZE = (224, 224)
BATCH_SIZE = 32

# Define path to your test dataset
test_data_dir = '/content/drive/MyDrive/blur_vs_sharp'

# Data generator for test set
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    shuffle=False
)

# Get the true labels
true_labels = test_generator.classes

# Get the class indices
class_indices = test_generator.class_indices
class_labels = list(class_indices.keys())

# Predict the probabilities for test set
predictions = model.predict(test_generator)
predicted_labels = np.where(predictions > 0.5, 1, 0).flatten()

# Generate confusion matrix
conf_matrix = confusion_matrix(true_labels, predicted_labels)
print(conf_matrix)

# Classification report
report = classification_report(true_labels, predicted_labels, target_names=class_labels)
print(report)

# Plot confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()
